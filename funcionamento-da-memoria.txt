DRAM - Dynamic Ram - +barata porém +lenta - cabe bastante dados;
SRAM - Static RAM - +rápida porém +cara - não cabe muitos dados - memória cache.
|_ Adicionado no processador para guardar dados que estamos usando no momento.

Memória cache - Usado para facilitar a troca de informações entre RAM e processador para 'encurtar' o caminho percorido pela informação.


      Core                   Core
 ----------------       ----------------
|                |     |                |
|      CPU       |     |      CPU       |
|                |     |                |
 ----------------       ----------------
|    Cache L1    |     |    Cache L1    |
|                |     |                | 
 ----------------       ----------------
|                |     |                |
|    Cache L2    |     |    Cache L2    |
|                |     |                |
 ----------------       ----------------
 ---------------------------------------
|                                       |    
|             Cache L3                  |
|                                       |
 ---------------------------------------

Chache L1 = Menor, rápido;
Cache L2 = Um pouco maior que o L1 e mais lento
Todos os cores/núcleos tem L1 e 2
L3 = Maior que o L2, mais lento e compartilhado entre os cores (Só aparece em processadores com 2 ou mais cores)

OUTROS USOS DO CACHE:

Navegadores:
    - Guardar dados de páginas já acessadas para carregamento mais rápido.
Banco de dados:
    - Guardar valores muito pedidos para acelerar a resposta.
Servidores:
    - Guardar serviços mais requisitados, como a página inicial de um site;
    - Processo normalmente feito em conjunto com uma CDN (content Delivery Network). Elas básicamente distribuem copias das suas mídias para diversos servidores para que o dado esteja mais próximo de você o possível.

Linguagens Cahce-Friendly:
    - É o nome dado as lingugens, como C e C++, que oforecem um controle maior na alocação de memória e podem ter seu tempo de execução influenciado pela memória cache;
    - Ou seja só mudando a ordem de alguns trechos de código, ele pode ficar bem rápido ou lento;
    - Isso ocorre porque a execução pode não ser feita de forma linear. Assi, quando o computador for copiar um bloco de dados para o cache, o próximo elemento da nossa lista nunca vai estar la.


HIERARQUIA DE MEMÓRIA:

Particularidade das memórias:
- Custo da memórias;
- Capacidade de armazenamento;
- Velocidade de armazenatmento;
- Velocidade de acesso.

Quanto mais tempo, menos capacidade de armazenamento. E vice e versa.

Registradores | 1 ciclo de clock | ~ 500bytes
Cache L1      | 700 GB/s         | 64 KB
Cache L2      | 200 GB/s         | 500 KB
Cache L3      | 150 GB/s         | 4 MB
RAM           | 10 GB/s          | 8 GB
SSD           | 2 GB/s           | 500 GB
HD            | 200 MB/s         | 4 TB
Cloud         | 2 MB/s           | PB ou EB
              V                  V  

Uma camada apenas conversa com a camada diretamente a cima ou abaixo dela

PRINCIPIO DE LOCALIDADE:

Localidade Temporal:
    - Se eu acessei agora, devo acessar de novo em breve.
Localidade Espacial:
    - Se eu acessei esse, devo acessar seu vizinho em breve.

32bit ou 64bit:

- Tamanho de informação que pode ser processada na CPU em um ciclo de clock - Dados guardados nos registradores;

Precessadores de 32bits:
    - Guardam a informação numa sequência binária com 32 dígitos.
Processadores de 64bits:
    - Guardam a informação numa sequência binária com 64 dígitos;
    - Tem mais performance, pois processa mais de uma só vez com optimizações mais complexas;
    - Tem mais memória, pois pode ter até 16bilhões de GB de RAM.

Num processador de 32bits não da para ter mais que 4GB de RAM.

Processadores de 32bits não leem instaladores de 64bits. Processadores de 64bits tem suporte para ler instaladores de 32bits.
